"""
–ú–æ–¥—É–ª—å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏.
"""
import openai
import os

def get_llm_client_and_model():
    """
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ –∏–º—è –º–æ–¥–µ–ª–∏
    –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã (LLM_PROVIDER):
    - 'openai' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API OpenAI. –¢—Ä–µ–±—É–µ—Ç OPENAI_API_KEY.
    - 'local': –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å API OpenAI (–Ω–∞–ø—Ä–∏–º–µ—Ä, LM Studio).

    –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    - LLM_PROVIDER: 'openai' –∏–ª–∏ 'local'.
    - OPENAI_API_KEY: –ö–ª—é—á –¥–ª—è API OpenAI.
    - LOCAL_LLM_MODEL: –ò–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'openai/gpt-oss-20b').
    - LOCAL_LLM_BASE_URL: URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'http://localhost:1234/v1').
    """
    llm_provider = os.getenv("LLM_PROVIDER", "local").lower()

    if llm_provider == "local":
        base_url = os.getenv("LOCAL_LLM_BASE_URL", "http://localhost:1234/v1")
        # –î–ª—è LM Studio –º–æ–¥–µ–ª—å —á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å–∞–º–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–µ
        model_name = os.getenv("LOCAL_LLM_MODEL", "local-model") 
        client = openai.OpenAI(base_url=base_url, api_key="not-needed")
        print("ü§ñ Using local LLM via LM Studio")
    else: # openai
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable not set for OpenAI provider.")
        client = openai.OpenAI(api_key=api_key)
        model_name = "gpt-4o-mini"
        print("‚òÅÔ∏è Using OpenAI API")

    return client, model_name
